{"version":3,"sources":["../node_modules/bignumber.js/bignumber.js"],"names":["__WEBPACK_AMD_DEFINE_RESULT__","globalObject","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","i","coeffToString","a","s","z","j","length","r","charCodeAt","slice","compare","x","y","b","xc","c","yc","k","e","l","intCheck","min","max","name","Error","String","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","P","prototype","constructor","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","v","alphabet","caseChanged","isNum","this","_isBigNumber","test","indexOf","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","push","format","rm","id","c0","ne","maxOrMin","args","method","m","call","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","lt","minimum","gt","random","random53bitInt","dp","rand","Uint32Array","copy","splice","sum","plus","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","pow","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","undefined","exports","__webpack_require__","module"],"mappings":"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","file":"static/js/26.574d8e8b.chunk.js","sourcesContent":[";\n\n(function (globalObject) {\n  'use strict';\n  /*\r\n   *      bignumber.js v9.0.0\r\n   *      A JavaScript library for arbitrary-precision arithmetic.\r\n   *      https://github.com/MikeMcl/bignumber.js\r\n   *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *      MIT Licensed.\r\n   *\r\n   *      BigNumber.prototype methods     |  BigNumber methods\r\n   *                                      |\r\n   *      absoluteValue            abs    |  clone\r\n   *      comparedTo                      |  config               set\r\n   *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n   *      dividedBy                div    |      ROUNDING_MODE\r\n   *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n   *      exponentiatedBy          pow    |      RANGE\r\n   *      integerValue                    |      CRYPTO\r\n   *      isEqualTo                eq     |      MODULO_MODE\r\n   *      isFinite                        |      POW_PRECISION\r\n   *      isGreaterThan            gt     |      FORMAT\r\n   *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n   *      isInteger                       |  isBigNumber\r\n   *      isLessThan               lt     |  maximum              max\r\n   *      isLessThanOrEqualTo      lte    |  minimum              min\r\n   *      isNaN                           |  random\r\n   *      isNegative                      |  sum\r\n   *      isPositive                      |\r\n   *      isZero                          |\r\n   *      minus                           |\r\n   *      modulo                   mod    |\r\n   *      multipliedBy             times  |\r\n   *      negated                         |\r\n   *      plus                            |\r\n   *      precision                sd     |\r\n   *      shiftedBy                       |\r\n   *      squareRoot               sqrt   |\r\n   *      toExponential                   |\r\n   *      toFixed                         |\r\n   *      toFormat                        |\r\n   *      toFraction                      |\r\n   *      toJSON                          |\r\n   *      toNumber                        |\r\n   *      toPrecision                     |\r\n   *      toString                        |\r\n   *      valueOf                         |\r\n   *\r\n   */\n\n  var BigNumber,\n      isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n      mathceil = Math.ceil,\n      mathfloor = Math.floor,\n      bignumberError = '[BigNumber Error] ',\n      tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n      BASE = 1e14,\n      LOG_BASE = 14,\n      MAX_SAFE_INTEGER = 0x1fffffffffffff,\n      // 2^53 - 1\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n      SQRT_BASE = 1e7,\n      // EDITABLE\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n  MAX = 1E9; // 0 to MAX_INT32\n\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\n\n  function clone(configObject) {\n    var div,\n        convertBase,\n        parseNumeric,\n        P = BigNumber.prototype = {\n      constructor: BigNumber,\n      toString: null,\n      valueOf: null\n    },\n        ONE = new BigNumber(1),\n        //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n    // The default values below must be integers within the inclusive ranges stated.\n    // The values can also be changed at run-time using BigNumber.set.\n    // The maximum number of decimal places for operations involving division.\n    DECIMAL_PLACES = 20,\n        // 0 to MAX\n    // The rounding mode used when rounding to the above decimal places, and when using\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n    // UP         0 Away from zero.\n    // DOWN       1 Towards zero.\n    // CEIL       2 Towards +Infinity.\n    // FLOOR      3 Towards -Infinity.\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n    ROUNDING_MODE = 4,\n        // 0 to 8\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n    // The exponent value at and beneath which toString returns exponential notation.\n    // Number type: -7\n    TO_EXP_NEG = -7,\n        // 0 to -MAX\n    // The exponent value at and above which toString returns exponential notation.\n    // Number type: 21\n    TO_EXP_POS = 21,\n        // 0 to MAX\n    // RANGE : [MIN_EXP, MAX_EXP]\n    // The minimum exponent value, beneath which underflow to zero occurs.\n    // Number type: -324  (5e-324)\n    MIN_EXP = -1e7,\n        // -1 to -MAX\n    // The maximum exponent value, above which overflow to Infinity occurs.\n    // Number type:  308  (1.7976931348623157e+308)\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n    MAX_EXP = 1e7,\n        // 1 to MAX\n    // Whether to use cryptographically-secure random number generation, if available.\n    CRYPTO = false,\n        // true or false\n    // The modulo mode used when calculating the modulus: a mod n.\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n    // The remainder (r) is calculated as: r = a - n * q.\n    //\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\n    // DOWN      1 The remainder has the same sign as the dividend.\n    //             This modulo mode is commonly known as 'truncated division' and is\n    //             equivalent to (a % n) in JavaScript.\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n    //             The remainder is always positive.\n    //\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n    // modes are commonly used for the modulus operation.\n    // Although the other rounding modes can also be used, they may not give useful results.\n    MODULO_MODE = 1,\n        // 0 to 9\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\n    POW_PRECISION = 0,\n        // 0 to MAX\n    // The format specification used by the BigNumber.prototype.toFormat method.\n    FORMAT = {\n      prefix: '',\n      groupSize: 3,\n      secondaryGroupSize: 0,\n      groupSeparator: ',',\n      decimalSeparator: '.',\n      fractionGroupSize: 0,\n      fractionGroupSeparator: '\\xA0',\n      // non-breaking space\n      suffix: ''\n    },\n        // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\n    // '-', '.', whitespace, or repeated character.\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'; //------------------------------------------------------------------------------------------\n    // CONSTRUCTOR\n\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\n\n    function BigNumber(v, b) {\n      var alphabet,\n          c,\n          caseChanged,\n          e,\n          i,\n          isNum,\n          len,\n          str,\n          x = this; // Enable constructor call without `new`.\n\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\n\n      if (b == null) {\n        if (v && v._isBigNumber === true) {\n          x.s = v.s;\n\n          if (!v.c || v.e > MAX_EXP) {\n            x.c = x.e = null;\n          } else if (v.e < MIN_EXP) {\n            x.c = [x.e = 0];\n          } else {\n            x.e = v.e;\n            x.c = v.c.slice();\n          }\n\n          return;\n        }\n\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\n          // Use `1 / n` to handle minus zero also.\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1; // Fast path for integers, where n < 2147483648 (2**31).\n\n          if (v === ~~v) {\n            for (e = 0, i = v; i >= 10; i /= 10, e++) {\n              ;\n            }\n\n            if (e > MAX_EXP) {\n              x.c = x.e = null;\n            } else {\n              x.e = e;\n              x.c = [v];\n            }\n\n            return;\n          }\n\n          str = String(v);\n        } else {\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n        } // Decimal point?\n\n\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?\n\n        if ((i = str.search(/e/i)) > 0) {\n          // Determine exponent.\n          if (e < 0) e = i;\n          e += +str.slice(i + 1);\n          str = str.substring(0, i);\n        } else if (e < 0) {\n          // Integer.\n          e = str.length;\n        }\n      } else {\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n        intCheck(b, 2, ALPHABET.length, 'Base'); // Allow exponential notation to be used with base 10 argument, while\n        // also rounding to DECIMAL_PLACES as with other bases.\n\n        if (b == 10) {\n          x = new BigNumber(v);\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n        }\n\n        str = String(v);\n\n        if (isNum = typeof v == 'number') {\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n            throw Error(tooManyDigits + v);\n          }\n        } else {\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n        }\n\n        alphabet = ALPHABET.slice(0, b);\n        e = i = 0; // Check that str is a valid base b number.\n        // Don't use RegExp, so alphabet can contain special characters.\n\n        for (len = str.length; i < len; i++) {\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n            if (c == '.') {\n              // If '.' is not the first character and it has not be found before.\n              if (i > e) {\n                e = len;\n                continue;\n              }\n            } else if (!caseChanged) {\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {\n                caseChanged = true;\n                i = -1;\n                e = 0;\n                continue;\n              }\n            }\n\n            return parseNumeric(x, String(v), isNum, b);\n          }\n        } // Prevent later check for length on converted number.\n\n\n        isNum = false;\n        str = convertBase(str, b, 10, x.s); // Decimal point?\n\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;\n      } // Determine leading zeros.\n\n\n      for (i = 0; str.charCodeAt(i) === 48; i++) {\n        ;\n      } // Determine trailing zeros.\n\n\n      for (len = str.length; str.charCodeAt(--len) === 48;) {\n        ;\n      }\n\n      if (str = str.slice(i, ++len)) {\n        len -= i; // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n\n        if (isNum && BigNumber.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\n          throw Error(tooManyDigits + x.s * v);\n        } // Overflow?\n\n\n        if ((e = e - i - 1) > MAX_EXP) {\n          // Infinity.\n          x.c = x.e = null; // Underflow?\n        } else if (e < MIN_EXP) {\n          // Zero.\n          x.c = [x.e = 0];\n        } else {\n          x.e = e;\n          x.c = []; // Transform base\n          // e is the base 10 exponent.\n          // i is where to slice str to get the first element of the coefficient array.\n\n          i = (e + 1) % LOG_BASE;\n          if (e < 0) i += LOG_BASE; // i < 1\n\n          if (i < len) {\n            if (i) x.c.push(+str.slice(0, i));\n\n            for (len -= LOG_BASE; i < len;) {\n              x.c.push(+str.slice(i, i += LOG_BASE));\n            }\n\n            i = LOG_BASE - (str = str.slice(i)).length;\n          } else {\n            i -= len;\n          }\n\n          for (; i--; str += '0') {\n            ;\n          }\n\n          x.c.push(+str);\n        }\n      } else {\n        // Zero.\n        x.c = [x.e = 0];\n      }\n    } // CONSTRUCTOR PROPERTIES\n\n\n    BigNumber.clone = clone;\n    BigNumber.ROUND_UP = 0;\n    BigNumber.ROUND_DOWN = 1;\n    BigNumber.ROUND_CEIL = 2;\n    BigNumber.ROUND_FLOOR = 3;\n    BigNumber.ROUND_HALF_UP = 4;\n    BigNumber.ROUND_HALF_DOWN = 5;\n    BigNumber.ROUND_HALF_EVEN = 6;\n    BigNumber.ROUND_HALF_CEIL = 7;\n    BigNumber.ROUND_HALF_FLOOR = 8;\n    BigNumber.EUCLID = 9;\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\n\n    BigNumber.config = BigNumber.set = function (obj) {\n      var p, v;\n\n      if (obj != null) {\n        if (typeof obj == 'object') {\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n            v = obj[p];\n            intCheck(v, 0, MAX, p);\n            DECIMAL_PLACES = v;\n          } // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n            v = obj[p];\n            intCheck(v, 0, 8, p);\n            ROUNDING_MODE = v;\n          } // EXPONENTIAL_AT {number|number[]}\n          // Integer, -MAX to MAX inclusive or\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n            v = obj[p];\n\n            if (v && v.pop) {\n              intCheck(v[0], -MAX, 0, p);\n              intCheck(v[1], 0, MAX, p);\n              TO_EXP_NEG = v[0];\n              TO_EXP_POS = v[1];\n            } else {\n              intCheck(v, -MAX, MAX, p);\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n            }\n          } // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'RANGE')) {\n            v = obj[p];\n\n            if (v && v.pop) {\n              intCheck(v[0], -MAX, -1, p);\n              intCheck(v[1], 1, MAX, p);\n              MIN_EXP = v[0];\n              MAX_EXP = v[1];\n            } else {\n              intCheck(v, -MAX, MAX, p);\n\n              if (v) {\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n              } else {\n                throw Error(bignumberError + p + ' cannot be zero: ' + v);\n              }\n            }\n          } // CRYPTO {boolean} true or false.\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\n          // '[BigNumber Error] crypto unavailable'\n\n\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\n            v = obj[p];\n\n            if (v === !!v) {\n              if (v) {\n                if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                  CRYPTO = v;\n                } else {\n                  CRYPTO = !v;\n                  throw Error(bignumberError + 'crypto unavailable');\n                }\n              } else {\n                CRYPTO = v;\n              }\n            } else {\n              throw Error(bignumberError + p + ' not true or false: ' + v);\n            }\n          } // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n            v = obj[p];\n            intCheck(v, 0, 9, p);\n            MODULO_MODE = v;\n          } // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n            v = obj[p];\n            intCheck(v, 0, MAX, p);\n            POW_PRECISION = v;\n          } // FORMAT {object}\n          // '[BigNumber Error] FORMAT not an object: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\n            v = obj[p];\n            if (typeof v == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);\n          } // ALPHABET {string}\n          // '[BigNumber Error] ALPHABET invalid: {v}'\n\n\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\n            v = obj[p]; // Disallow if only one character,\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\n\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\n              ALPHABET = v;\n            } else {\n              throw Error(bignumberError + p + ' invalid: ' + v);\n            }\n          }\n        } else {\n          // '[BigNumber Error] Object expected: {v}'\n          throw Error(bignumberError + 'Object expected: ' + obj);\n        }\n      }\n\n      return {\n        DECIMAL_PLACES: DECIMAL_PLACES,\n        ROUNDING_MODE: ROUNDING_MODE,\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n        RANGE: [MIN_EXP, MAX_EXP],\n        CRYPTO: CRYPTO,\n        MODULO_MODE: MODULO_MODE,\n        POW_PRECISION: POW_PRECISION,\n        FORMAT: FORMAT,\n        ALPHABET: ALPHABET\n      };\n    };\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\n\n\n    BigNumber.isBigNumber = function (v) {\n      if (!v || v._isBigNumber !== true) return false;\n      if (!BigNumber.DEBUG) return true;\n      var i,\n          n,\n          c = v.c,\n          e = v.e,\n          s = v.s;\n\n      out: if ({}.toString.call(c) == '[object Array]') {\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\n          // If the first element is zero, the BigNumber value must be zero.\n          if (c[0] === 0) {\n            if (e === 0 && c.length === 1) return true;\n            break out;\n          } // Calculate number of digits that c[0] should have, based on the exponent.\n\n\n          i = (e + 1) % LOG_BASE;\n          if (i < 1) i += LOG_BASE; // Calculate number of digits of c[0].\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\n\n          if (String(c[0]).length == i) {\n            for (i = 0; i < c.length; i++) {\n              n = c[i];\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\n            } // Last element cannot be zero, unless it is the only element.\n\n\n            if (n !== 0) return true;\n          }\n        } // Infinity/NaN\n\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\n        return true;\n      }\n\n      throw Error(bignumberError + 'Invalid BigNumber: ' + v);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n\n\n    BigNumber.maximum = BigNumber.max = function () {\n      return maxOrMin(arguments, P.lt);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n\n\n    BigNumber.minimum = BigNumber.min = function () {\n      return maxOrMin(arguments, P.gt);\n    };\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\n\n\n    BigNumber.random = function () {\n      var pow2_53 = 0x20000000000000; // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n      // Check if Math.random() produces more than 32 bits of randomness.\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n\n      var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n        return mathfloor(Math.random() * pow2_53);\n      } : function () {\n        return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n      };\n      return function (dp) {\n        var a,\n            b,\n            e,\n            k,\n            v,\n            i = 0,\n            c = [],\n            rand = new BigNumber(ONE);\n        if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);\n        k = mathceil(dp / LOG_BASE);\n\n        if (CRYPTO) {\n          // Browsers supporting crypto.getRandomValues.\n          if (crypto.getRandomValues) {\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n            for (; i < k;) {\n              // 53 bits:\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n              //                                     11111 11111111 11111111\n              // 0x20000 is 2^21.\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11); // Rejection sampling:\n              // 0 <= v < 9007199254740992\n              // Probability that v >= 9e15, is\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n\n              if (v >= 9e15) {\n                b = crypto.getRandomValues(new Uint32Array(2));\n                a[i] = b[0];\n                a[i + 1] = b[1];\n              } else {\n                // 0 <= v <= 8999999999999999\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 2;\n              }\n            }\n\n            i = k / 2; // Node.js supporting crypto.randomBytes.\n          } else if (crypto.randomBytes) {\n            // buffer\n            a = crypto.randomBytes(k *= 7);\n\n            for (; i < k;) {\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n              // 0 <= v < 9007199254740992\n              v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n              if (v >= 9e15) {\n                crypto.randomBytes(7).copy(a, i);\n              } else {\n                // 0 <= (v % 1e14) <= 99999999999999\n                c.push(v % 1e14);\n                i += 7;\n              }\n            }\n\n            i = k / 7;\n          } else {\n            CRYPTO = false;\n            throw Error(bignumberError + 'crypto unavailable');\n          }\n        } // Use Math.random.\n\n\n        if (!CRYPTO) {\n          for (; i < k;) {\n            v = random53bitInt();\n            if (v < 9e15) c[i++] = v % 1e14;\n          }\n        }\n\n        k = c[--i];\n        dp %= LOG_BASE; // Convert trailing digits to zeros according to dp.\n\n        if (k && dp) {\n          v = POWS_TEN[LOG_BASE - dp];\n          c[i] = mathfloor(k / v) * v;\n        } // Remove trailing elements which are zero.\n\n\n        for (; c[i] === 0; c.pop(), i--) {\n          ;\n        } // Zero?\n\n\n        if (i < 0) {\n          c = [e = 0];\n        } else {\n          // Remove leading elements which are zero and adjust exponent accordingly.\n          for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE) {\n            ;\n          } // Count the digits of the first element of c to determine leading zeros, and...\n\n\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++) {\n            ;\n          } // adjust the exponent accordingly.\n\n\n          if (i < LOG_BASE) e -= LOG_BASE - i;\n        }\n\n        rand.e = e;\n        rand.c = c;\n        return rand;\n      };\n    }();\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\n\n\n    BigNumber.sum = function () {\n      var i = 1,\n          args = arguments,\n          sum = new BigNumber(args[0]);\n\n      for (; i < args.length;) {\n        sum = sum.plus(args[i++]);\n      }\n\n      return sum;\n    }; // PRIVATE FUNCTIONS\n    // Called by BigNumber and BigNumber.prototype.toString.\n\n\n    convertBase = function () {\n      var decimal = '0123456789';\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\n\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\n        var j,\n            arr = [0],\n            arrL,\n            i = 0,\n            len = str.length;\n\n        for (; i < len;) {\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) {\n            ;\n          }\n\n          arr[0] += alphabet.indexOf(str.charAt(i++));\n\n          for (j = 0; j < arr.length; j++) {\n            if (arr[j] > baseOut - 1) {\n              if (arr[j + 1] == null) arr[j + 1] = 0;\n              arr[j + 1] += arr[j] / baseOut | 0;\n              arr[j] %= baseOut;\n            }\n          }\n        }\n\n        return arr.reverse();\n      } // Convert a numeric string of baseIn to a numeric string of baseOut.\n      // If the caller is toString, we are converting from base 10 to baseOut.\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\n\n\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\n        var alphabet,\n            d,\n            e,\n            k,\n            r,\n            x,\n            xc,\n            y,\n            i = str.indexOf('.'),\n            dp = DECIMAL_PLACES,\n            rm = ROUNDING_MODE; // Non-integer.\n\n        if (i >= 0) {\n          k = POW_PRECISION; // Unlimited precision.\n\n          POW_PRECISION = 0;\n          str = str.replace('.', '');\n          y = new BigNumber(baseIn);\n          x = y.pow(str.length - i);\n          POW_PRECISION = k; // Convert str as if an integer, then restore the fraction part by dividing the\n          // result by its base raised to a power.\n\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);\n          y.e = y.c.length;\n        } // Convert the number as integer.\n\n\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET)); // xc now represents str as an integer and converted to baseOut. e is the exponent.\n\n        e = k = xc.length; // Remove trailing zeros.\n\n        for (; xc[--k] == 0; xc.pop()) {\n          ;\n        } // Zero?\n\n\n        if (!xc[0]) return alphabet.charAt(0); // Does str represent an integer? If so, no need for the division.\n\n        if (i < 0) {\n          --e;\n        } else {\n          x.c = xc;\n          x.e = e; // The sign is needed for correct rounding.\n\n          x.s = sign;\n          x = div(x, y, dp, rm, baseOut);\n          xc = x.c;\n          r = x.r;\n          e = x.e;\n        } // xc now represents str converted to baseOut.\n        // THe index of the rounding digit.\n\n\n        d = e + dp + 1; // The rounding digit: the digit to the right of the digit that may be rounded up.\n\n        i = xc[d]; // Look at the rounding digits and mode to determine whether to round up.\n\n        k = baseOut / 2;\n        r = r || d < 0 || xc[d + 1] != null;\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7)); // If the index of the rounding digit is not greater than zero, or xc represents\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\n        // such as 0.00001.\n\n        if (d < 1 || !xc[0]) {\n          // 1^-dp or 0\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\n        } else {\n          // Truncate xc to the required number of decimal places.\n          xc.length = d; // Round up?\n\n          if (r) {\n            // Rounding up may mean the previous digit has to be rounded up and so on.\n            for (--baseOut; ++xc[--d] > baseOut;) {\n              xc[d] = 0;\n\n              if (!d) {\n                ++e;\n                xc = [1].concat(xc);\n              }\n            }\n          } // Determine trailing zeros.\n\n\n          for (k = xc.length; !xc[--k];) {\n            ;\n          } // E.g. [4, 11, 15] becomes 4bf.\n\n\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++])) {\n            ;\n          } // Add leading zeros, decimal point and trailing zeros as required.\n\n\n          str = toFixedPoint(str, e, alphabet.charAt(0));\n        } // The caller will add the sign.\n\n\n        return str;\n      };\n    }(); // Perform division in the specified base. Called by div and convertBase.\n\n\n    div = function () {\n      // Assume non-zero x and k.\n      function multiply(x, k, base) {\n        var m,\n            temp,\n            xlo,\n            xhi,\n            carry = 0,\n            i = x.length,\n            klo = k % SQRT_BASE,\n            khi = k / SQRT_BASE | 0;\n\n        for (x = x.slice(); i--;) {\n          xlo = x[i] % SQRT_BASE;\n          xhi = x[i] / SQRT_BASE | 0;\n          m = khi * xlo + xhi * klo;\n          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n          x[i] = temp % base;\n        }\n\n        if (carry) x = [carry].concat(x);\n        return x;\n      }\n\n      function compare(a, b, aL, bL) {\n        var i, cmp;\n\n        if (aL != bL) {\n          cmp = aL > bL ? 1 : -1;\n        } else {\n          for (i = cmp = 0; i < aL; i++) {\n            if (a[i] != b[i]) {\n              cmp = a[i] > b[i] ? 1 : -1;\n              break;\n            }\n          }\n        }\n\n        return cmp;\n      }\n\n      function subtract(a, b, aL, base) {\n        var i = 0; // Subtract b from a.\n\n        for (; aL--;) {\n          a[aL] -= i;\n          i = a[aL] < b[aL] ? 1 : 0;\n          a[aL] = i * base + a[aL] - b[aL];\n        } // Remove leading zeros.\n\n\n        for (; !a[0] && a.length > 1; a.splice(0, 1)) {\n          ;\n        }\n      } // x: dividend, y: divisor.\n\n\n      return function (x, y, dp, rm, base) {\n        var cmp,\n            e,\n            i,\n            more,\n            n,\n            prod,\n            prodL,\n            q,\n            qc,\n            rem,\n            remL,\n            rem0,\n            xi,\n            xL,\n            yc0,\n            yL,\n            yz,\n            s = x.s == y.s ? 1 : -1,\n            xc = x.c,\n            yc = y.c; // Either NaN, Infinity or 0?\n\n        if (!xc || !xc[0] || !yc || !yc[0]) {\n          return new BigNumber( // Return NaN if either NaN, or both Infinity or 0.\n          !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n        }\n\n        q = new BigNumber(s);\n        qc = q.c = [];\n        e = x.e - y.e;\n        s = dp + e + 1;\n\n        if (!base) {\n          base = BASE;\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n          s = s / LOG_BASE | 0;\n        } // Result exponent may be one less then the current value of e.\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n\n\n        for (i = 0; yc[i] == (xc[i] || 0); i++) {\n          ;\n        }\n\n        if (yc[i] > (xc[i] || 0)) e--;\n\n        if (s < 0) {\n          qc.push(1);\n          more = true;\n        } else {\n          xL = xc.length;\n          yL = yc.length;\n          i = 0;\n          s += 2; // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n          n = mathfloor(base / (yc[0] + 1)); // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n\n          if (n > 1) {\n            yc = multiply(yc, n, base);\n            xc = multiply(xc, n, base);\n            yL = yc.length;\n            xL = xc.length;\n          }\n\n          xi = yL;\n          rem = xc.slice(0, yL);\n          remL = rem.length; // Add zeros to make remainder as long as divisor.\n\n          for (; remL < yL; rem[remL++] = 0) {\n            ;\n          }\n\n          yz = yc.slice();\n          yz = [0].concat(yz);\n          yc0 = yc[0];\n          if (yc[1] >= base / 2) yc0++; // Not necessary, but to prevent trial digit n > base, when using base 3.\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n          do {\n            n = 0; // Compare divisor and remainder.\n\n            cmp = compare(yc, rem, yL, remL); // If divisor < remainder.\n\n            if (cmp < 0) {\n              // Calculate trial digit, n.\n              rem0 = rem[0];\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // n is how many times the divisor goes into the current remainder.\n\n              n = mathfloor(rem0 / yc0); //  Algorithm:\n              //  product = divisor multiplied by trial digit (n).\n              //  Compare product and remainder.\n              //  If product is greater than remainder:\n              //    Subtract divisor from product, decrement trial digit.\n              //  Subtract product from remainder.\n              //  If product was less than remainder at the last compare:\n              //    Compare new remainder and divisor.\n              //    If remainder is greater than divisor:\n              //      Subtract divisor from remainder, increment trial digit.\n\n              if (n > 1) {\n                // n may be > base only when base is 3.\n                if (n >= base) n = base - 1; // product = divisor * trial digit.\n\n                prod = multiply(yc, n, base);\n                prodL = prod.length;\n                remL = rem.length; // Compare product and remainder.\n                // If product > remainder then trial digit n too high.\n                // n is 1 too high about 5% of the time, and is not known to have\n                // ever been more than 1 too high.\n\n                while (compare(prod, rem, prodL, remL) == 1) {\n                  n--; // Subtract divisor from product.\n\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                  prodL = prod.length;\n                  cmp = 1;\n                }\n              } else {\n                // n is 0 or 1, cmp is -1.\n                // If n is 0, there is no need to compare yc and rem again below,\n                // so change cmp to 1 to avoid it.\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                if (n == 0) {\n                  // divisor < remainder, so n must be at least 1.\n                  cmp = n = 1;\n                } // product = divisor\n\n\n                prod = yc.slice();\n                prodL = prod.length;\n              }\n\n              if (prodL < remL) prod = [0].concat(prod); // Subtract product from remainder.\n\n              subtract(rem, prod, remL, base);\n              remL = rem.length; // If product was < remainder.\n\n              if (cmp == -1) {\n                // Compare divisor and new remainder.\n                // If divisor < new remainder, subtract divisor from remainder.\n                // Trial digit n too low.\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                while (compare(yc, rem, yL, remL) < 1) {\n                  n++; // Subtract divisor from remainder.\n\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\n                  remL = rem.length;\n                }\n              }\n            } else if (cmp === 0) {\n              n++;\n              rem = [0];\n            } // else cmp === 1 and n will be 0\n            // Add the next digit, n, to the result array.\n\n\n            qc[i++] = n; // Update the remainder.\n\n            if (rem[0]) {\n              rem[remL++] = xc[xi] || 0;\n            } else {\n              rem = [xc[xi]];\n              remL = 1;\n            }\n          } while ((xi++ < xL || rem[0] != null) && s--);\n\n          more = rem[0] != null; // Leading zero?\n\n          if (!qc[0]) qc.splice(0, 1);\n        }\n\n        if (base == BASE) {\n          // To calculate q.e, first get the number of digits of qc[0].\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++) {\n            ;\n          }\n\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more); // Caller is convertBase.\n        } else {\n          q.e = e;\n          q.r = +more;\n        }\n\n        return q;\n      };\n    }();\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\n\n\n    function format(n, i, rm, id) {\n      var c0, e, ne, len, str;\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      if (!n.c) return n.toString();\n      c0 = n.c[0];\n      ne = n.e;\n\n      if (i == null) {\n        str = coeffToString(n.c);\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, '0');\n      } else {\n        n = round(new BigNumber(n), i, rm); // n.e may have changed if the value was rounded up.\n\n        e = n.e;\n        str = coeffToString(n.c);\n        len = str.length; // toPrecision returns exponential notation if the number of significant digits\n        // specified is less than the number of digits necessary to represent the integer\n        // part of the value in fixed-point notation.\n        // Exponential notation.\n\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n          // Append zeros?\n          for (; len < i; str += '0', len++) {\n            ;\n          }\n\n          str = toExponential(str, e); // Fixed-point notation.\n        } else {\n          i -= ne;\n          str = toFixedPoint(str, e, '0'); // Append zeros?\n\n          if (e + 1 > len) {\n            if (--i > 0) for (str += '.'; i--; str += '0') {\n              ;\n            }\n          } else {\n            i += e - len;\n\n            if (i > 0) {\n              if (e + 1 == len) str += '.';\n\n              for (; i--; str += '0') {\n                ;\n              }\n            }\n          }\n        }\n      }\n\n      return n.s < 0 && c0 ? '-' + str : str;\n    } // Handle BigNumber.max and BigNumber.min.\n\n\n    function maxOrMin(args, method) {\n      var n,\n          i = 1,\n          m = new BigNumber(args[0]);\n\n      for (; i < args.length; i++) {\n        n = new BigNumber(args[i]); // If any number is NaN, return NaN.\n\n        if (!n.s) {\n          m = n;\n          break;\n        } else if (method.call(m, n)) {\n          m = n;\n        }\n      }\n\n      return m;\n    }\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\n\n\n    function normalise(n, c, e) {\n      var i = 1,\n          j = c.length; // Remove trailing zeros.\n\n      for (; !c[--j]; c.pop()) {\n        ;\n      } // Calculate the base 10 exponent. First get the number of digits of c[0].\n\n\n      for (j = c[0]; j >= 10; j /= 10, i++) {\n        ;\n      } // Overflow?\n\n\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n        // Infinity.\n        n.c = n.e = null; // Underflow?\n      } else if (e < MIN_EXP) {\n        // Zero.\n        n.c = [n.e = 0];\n      } else {\n        n.e = e;\n        n.c = c;\n      }\n\n      return n;\n    } // Handle values that fail the validity test in BigNumber.\n\n\n    parseNumeric = function () {\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n          dotAfter = /^([^.]+)\\.$/,\n          dotBefore = /^\\.([^.]+)$/,\n          isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n          whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n      return function (x, str, isNum, b) {\n        var base,\n            s = isNum ? str : str.replace(whitespaceOrPlus, ''); // No exception on ±Infinity or NaN.\n\n        if (isInfinityOrNaN.test(s)) {\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n        } else {\n          if (!isNum) {\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n            s = s.replace(basePrefix, function (m, p1, p2) {\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n              return !b || b == base ? p1 : m;\n            });\n\n            if (b) {\n              base = b; // E.g. '1.' to '1', '.1' to '0.1'\n\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n            }\n\n            if (str != s) return new BigNumber(s, base);\n          } // '[BigNumber Error] Not a number: {n}'\n          // '[BigNumber Error] Not a base {b} number: {n}'\n\n\n          if (BigNumber.DEBUG) {\n            throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n          } // NaN\n\n\n          x.s = null;\n        }\n\n        x.c = x.e = null;\n      };\n    }();\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\n\n\n    function round(x, sd, rm, r) {\n      var d,\n          i,\n          j,\n          k,\n          n,\n          ni,\n          rd,\n          xc = x.c,\n          pows10 = POWS_TEN; // if x is not Infinity or NaN...\n\n      if (xc) {\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\n        // ni is the index of n within x.c.\n        // d is the number of digits of n.\n        // i is the index of rd within n including leading zeros.\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\n        out: {\n          // Get the number of digits of the first element of xc.\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) {\n            ;\n          }\n\n          i = sd - d; // If the rounding digit is in the first element of xc...\n\n          if (i < 0) {\n            i += LOG_BASE;\n            j = sd;\n            n = xc[ni = 0]; // Get the rounding digit at index j of n.\n\n            rd = n / pows10[d - j - 1] % 10 | 0;\n          } else {\n            ni = mathceil((i + 1) / LOG_BASE);\n\n            if (ni >= xc.length) {\n              if (r) {\n                // Needed by sqrt.\n                for (; xc.length <= ni; xc.push(0)) {\n                  ;\n                }\n\n                n = rd = 0;\n                d = 1;\n                i %= LOG_BASE;\n                j = i - LOG_BASE + 1;\n              } else {\n                break out;\n              }\n            } else {\n              n = k = xc[ni]; // Get the number of digits of n.\n\n              for (d = 1; k >= 10; k /= 10, d++) {\n                ;\n              } // Get the index of rd within n.\n\n\n              i %= LOG_BASE; // Get the index of rd within n, adjusted for leading zeros.\n              // The number of leading zeros of n is given by LOG_BASE - d.\n\n              j = i - LOG_BASE + d; // Get the rounding digit at index j of n.\n\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n            }\n          }\n\n          r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n          r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.\n          (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n\n          if (sd < 1 || !xc[0]) {\n            xc.length = 0;\n\n            if (r) {\n              // Convert sd to decimal places.\n              sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n              x.e = -sd || 0;\n            } else {\n              // Zero.\n              xc[0] = x.e = 0;\n            }\n\n            return x;\n          } // Remove excess digits.\n\n\n          if (i == 0) {\n            xc.length = ni;\n            k = 1;\n            ni--;\n          } else {\n            xc.length = ni + 1;\n            k = pows10[LOG_BASE - i]; // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n            // j > 0 means i > number of leading zeros of n.\n\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n          } // Round up?\n\n\n          if (r) {\n            for (;;) {\n              // If the digit to be rounded up is in the first element of xc...\n              if (ni == 0) {\n                // i will be the length of xc[0] before k is added.\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++) {\n                  ;\n                }\n\n                j = xc[0] += k;\n\n                for (k = 1; j >= 10; j /= 10, k++) {\n                  ;\n                } // if i != k the length has increased.\n\n\n                if (i != k) {\n                  x.e++;\n                  if (xc[0] == BASE) xc[0] = 1;\n                }\n\n                break;\n              } else {\n                xc[ni] += k;\n                if (xc[ni] != BASE) break;\n                xc[ni--] = 0;\n                k = 1;\n              }\n            }\n          } // Remove trailing zeros.\n\n\n          for (i = xc.length; xc[--i] === 0; xc.pop()) {\n            ;\n          }\n        } // Overflow? Infinity.\n\n\n        if (x.e > MAX_EXP) {\n          x.c = x.e = null; // Underflow? Zero.\n        } else if (x.e < MIN_EXP) {\n          x.c = [x.e = 0];\n        }\n      }\n\n      return x;\n    }\n\n    function valueOf(n) {\n      var str,\n          e = n.e;\n      if (e === null) return n.toString();\n      str = coeffToString(n.c);\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');\n      return n.s < 0 ? '-' + str : str;\n    } // PROTOTYPE/INSTANCE METHODS\n\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\n\n\n    P.absoluteValue = P.abs = function () {\n      var x = new BigNumber(this);\n      if (x.s < 0) x.s = 1;\n      return x;\n    };\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\n\n\n    P.comparedTo = function (y, b) {\n      return compare(this, new BigNumber(y, b));\n    };\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n\n\n    P.decimalPlaces = P.dp = function (dp, rm) {\n      var c,\n          n,\n          v,\n          x = this;\n\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        return round(new BigNumber(x), dp + x.e + 1, rm);\n      }\n\n      if (!(c = x.c)) return null;\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last number.\n\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--) {\n        ;\n      }\n      if (n < 0) n = 0;\n      return n;\n    };\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n\n\n    P.dividedBy = P.div = function (y, b) {\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\n\n\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\n      return div(this, new BigNumber(y, b), 0, 1);\n    };\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\n\n\n    P.exponentiatedBy = P.pow = function (n, m) {\n      var half,\n          isModExp,\n          i,\n          k,\n          more,\n          nIsBig,\n          nIsNeg,\n          nIsOdd,\n          y,\n          x = this;\n      n = new BigNumber(n); // Allow NaN and ±Infinity, but not other non-integers.\n\n      if (n.c && !n.isInteger()) {\n        throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));\n      }\n\n      if (m != null) m = new BigNumber(m); // Exponent of MAX_SAFE_INTEGER is 15.\n\n      nIsBig = n.e > 14; // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n        // The sign of the result of pow when x is negative depends on the evenness of n.\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\n        return m ? y.mod(m) : y;\n      }\n\n      nIsNeg = n.s < 0;\n\n      if (m) {\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n        if (isModExp) x = x.mod(m); // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n        // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 // [1, 240000000]\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 // [80000000000000]  [99999750000000]\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n        // If x is negative and n is odd, k = -0, else k = 0.\n        k = x.s < 0 && isOdd(n) ? -0 : 0; // If x >= 1, k = ±Infinity.\n\n        if (x.e > -1) k = 1 / k; // If n is negative return ±0, else return ±Infinity.\n\n        return new BigNumber(nIsNeg ? 1 / k : k);\n      } else if (POW_PRECISION) {\n        // Truncating each coefficient array to a length of k after each multiplication\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\n        // i.e. there will be a minimum of 28 guard digits retained.\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\n      }\n\n      if (nIsBig) {\n        half = new BigNumber(0.5);\n        if (nIsNeg) n.s = 1;\n        nIsOdd = isOdd(n);\n      } else {\n        i = Math.abs(+valueOf(n));\n        nIsOdd = i % 2;\n      }\n\n      y = new BigNumber(ONE); // Performs 54 loop iterations for n of 9007199254740991.\n\n      for (;;) {\n        if (nIsOdd) {\n          y = y.times(x);\n          if (!y.c) break;\n\n          if (k) {\n            if (y.c.length > k) y.c.length = k;\n          } else if (isModExp) {\n            y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n          }\n        }\n\n        if (i) {\n          i = mathfloor(i / 2);\n          if (i === 0) break;\n          nIsOdd = i % 2;\n        } else {\n          n = n.times(half);\n          round(n, n.e + 1, 1);\n\n          if (n.e > 14) {\n            nIsOdd = isOdd(n);\n          } else {\n            i = +valueOf(n);\n            if (i === 0) break;\n            nIsOdd = i % 2;\n          }\n        }\n\n        x = x.times(x);\n\n        if (k) {\n          if (x.c && x.c.length > k) x.c.length = k;\n        } else if (isModExp) {\n          x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n        }\n      }\n\n      if (isModExp) return y;\n      if (nIsNeg) y = ONE.div(y);\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\n\n\n    P.integerValue = function (rm) {\n      var n = new BigNumber(this);\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      return round(n, n.e + 1, rm);\n    };\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n\n\n    P.isEqualTo = P.eq = function (y, b) {\n      return compare(this, new BigNumber(y, b)) === 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\n\n\n    P.isFinite = function () {\n      return !!this.c;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n\n\n    P.isGreaterThan = P.gt = function (y, b) {\n      return compare(this, new BigNumber(y, b)) > 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\n\n\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\n\n\n    P.isInteger = function () {\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\n\n\n    P.isLessThan = P.lt = function (y, b) {\n      return compare(this, new BigNumber(y, b)) < 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\n\n\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\n\n\n    P.isNaN = function () {\n      return !this.s;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\n\n\n    P.isNegative = function () {\n      return this.s < 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\n\n\n    P.isPositive = function () {\n      return this.s > 0;\n    };\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\n\n\n    P.isZero = function () {\n      return !!this.c && this.c[0] == 0;\n    };\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\n\n\n    P.minus = function (y, b) {\n      var i,\n          j,\n          t,\n          xLTy,\n          x = this,\n          a = x.s;\n      y = new BigNumber(y, b);\n      b = y.s; // Either NaN?\n\n      if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n      if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n      }\n\n      var xe = x.e / LOG_BASE,\n          ye = y.e / LOG_BASE,\n          xc = x.c,\n          yc = y.c;\n\n      if (!xe || !ye) {\n        // Either Infinity?\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN); // Either zero?\n\n        if (!xc[0] || !yc[0]) {\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n          ROUNDING_MODE == 3 ? -0 : 0);\n        }\n      }\n\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice(); // Determine which is the bigger number.\n\n      if (a = xe - ye) {\n        if (xLTy = a < 0) {\n          a = -a;\n          t = xc;\n        } else {\n          ye = xe;\n          t = yc;\n        }\n\n        t.reverse(); // Prepend zeros to equalise exponents.\n\n        for (b = a; b--; t.push(0)) {\n          ;\n        }\n\n        t.reverse();\n      } else {\n        // Exponents equal. Check digit by digit.\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n        for (a = b = 0; b < j; b++) {\n          if (xc[b] != yc[b]) {\n            xLTy = xc[b] < yc[b];\n            break;\n          }\n        }\n      } // x < y? Point xc to the array of the bigger number.\n\n\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n      b = (j = yc.length) - (i = xc.length); // Append zeros to xc if shorter.\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n\n      if (b > 0) for (; b--; xc[i++] = 0) {\n        ;\n      }\n      b = BASE - 1; // Subtract yc from xc.\n\n      for (; j > a;) {\n        if (xc[--j] < yc[j]) {\n          for (i = j; i && !xc[--i]; xc[i] = b) {\n            ;\n          }\n\n          --xc[i];\n          xc[j] += BASE;\n        }\n\n        xc[j] -= yc[j];\n      } // Remove leading zeros and adjust exponent accordingly.\n\n\n      for (; xc[0] == 0; xc.splice(0, 1), --ye) {\n        ;\n      } // Zero?\n\n\n      if (!xc[0]) {\n        // Following IEEE 754 (2008) 6.3,\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\n        y.c = [y.e = 0];\n        return y;\n      } // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n      // for finite x and y.\n\n\n      return normalise(y, xc, ye);\n    };\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\n\n\n    P.modulo = P.mod = function (y, b) {\n      var q,\n          s,\n          x = this;\n      y = new BigNumber(y, b); // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n\n      if (!x.c || !y.s || y.c && !y.c[0]) {\n        return new BigNumber(NaN); // Return x if y is Infinity or x is zero.\n      } else if (!y.c || x.c && !x.c[0]) {\n        return new BigNumber(x);\n      }\n\n      if (MODULO_MODE == 9) {\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\n        // r = x - qy    where  0 <= r < abs(y)\n        s = y.s;\n        y.s = 1;\n        q = div(x, y, 0, 3);\n        y.s = s;\n        q.s *= s;\n      } else {\n        q = div(x, y, 0, MODULO_MODE);\n      }\n\n      y = x.minus(q.times(y)); // To match JavaScript %, ensure sign of zero is sign of dividend.\n\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n      return y;\n    };\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\n\n\n    P.multipliedBy = P.times = function (y, b) {\n      var c,\n          e,\n          i,\n          j,\n          k,\n          m,\n          xcL,\n          xlo,\n          xhi,\n          ycL,\n          ylo,\n          yhi,\n          zc,\n          base,\n          sqrtBase,\n          x = this,\n          xc = x.c,\n          yc = (y = new BigNumber(y, b)).c; // Either NaN, ±Infinity or ±0?\n\n      if (!xc || !yc || !xc[0] || !yc[0]) {\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n          y.c = y.e = y.s = null;\n        } else {\n          y.s *= x.s; // Return ±Infinity if either is ±Infinity.\n\n          if (!xc || !yc) {\n            y.c = y.e = null; // Return ±0 if either is ±0.\n          } else {\n            y.c = [0];\n            y.e = 0;\n          }\n        }\n\n        return y;\n      }\n\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n      y.s *= x.s;\n      xcL = xc.length;\n      ycL = yc.length; // Ensure xc points to longer array and xcL to its length.\n\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i; // Initialise the result array with zeros.\n\n      for (i = xcL + ycL, zc = []; i--; zc.push(0)) {\n        ;\n      }\n\n      base = BASE;\n      sqrtBase = SQRT_BASE;\n\n      for (i = ycL; --i >= 0;) {\n        c = 0;\n        ylo = yc[i] % sqrtBase;\n        yhi = yc[i] / sqrtBase | 0;\n\n        for (k = xcL, j = i + k; j > i;) {\n          xlo = xc[--k] % sqrtBase;\n          xhi = xc[k] / sqrtBase | 0;\n          m = yhi * xlo + xhi * ylo;\n          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n          zc[j--] = xlo % base;\n        }\n\n        zc[j] = c;\n      }\n\n      if (c) {\n        ++e;\n      } else {\n        zc.splice(0, 1);\n      }\n\n      return normalise(y, zc, e);\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\n\n\n    P.negated = function () {\n      var x = new BigNumber(this);\n      x.s = -x.s || null;\n      return x;\n    };\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\n\n\n    P.plus = function (y, b) {\n      var t,\n          x = this,\n          a = x.s;\n      y = new BigNumber(y, b);\n      b = y.s; // Either NaN?\n\n      if (!a || !b) return new BigNumber(NaN); // Signs differ?\n\n      if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n      }\n\n      var xe = x.e / LOG_BASE,\n          ye = y.e / LOG_BASE,\n          xc = x.c,\n          yc = y.c;\n\n      if (!xe || !ye) {\n        // Return ±Infinity if either ±Infinity.\n        if (!xc || !yc) return new BigNumber(a / 0); // Either zero?\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n      }\n\n      xe = bitFloor(xe);\n      ye = bitFloor(ye);\n      xc = xc.slice(); // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n\n      if (a = xe - ye) {\n        if (a > 0) {\n          ye = xe;\n          t = yc;\n        } else {\n          a = -a;\n          t = xc;\n        }\n\n        t.reverse();\n\n        for (; a--; t.push(0)) {\n          ;\n        }\n\n        t.reverse();\n      }\n\n      a = xc.length;\n      b = yc.length; // Point xc to the longer array, and b to the shorter length.\n\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a; // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n\n      for (a = 0; b;) {\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n      }\n\n      if (a) {\n        xc = [a].concat(xc);\n        ++ye;\n      } // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n      // ye = MAX_EXP + 1 possible\n\n\n      return normalise(y, xc, ye);\n    };\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\n\n\n    P.precision = P.sd = function (sd, rm) {\n      var c,\n          n,\n          v,\n          x = this;\n\n      if (sd != null && sd !== !!sd) {\n        intCheck(sd, 1, MAX);\n        if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n        return round(new BigNumber(x), sd, rm);\n      }\n\n      if (!(c = x.c)) return null;\n      v = c.length - 1;\n      n = v * LOG_BASE + 1;\n\n      if (v = c[v]) {\n        // Subtract the number of trailing zeros of the last element.\n        for (; v % 10 == 0; v /= 10, n--) {\n          ;\n        } // Add the number of digits of the first element.\n\n\n        for (v = c[0]; v >= 10; v /= 10, n++) {\n          ;\n        }\n      }\n\n      if (sd && x.e + 1 > n) n = x.e + 1;\n      return n;\n    };\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\n\n\n    P.shiftedBy = function (k) {\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n      return this.times('1e' + k);\n    };\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\n\n\n    P.squareRoot = P.sqrt = function () {\n      var m,\n          n,\n          r,\n          rep,\n          t,\n          x = this,\n          c = x.c,\n          s = x.s,\n          e = x.e,\n          dp = DECIMAL_PLACES + 4,\n          half = new BigNumber('0.5'); // Negative/NaN/Infinity/zero?\n\n      if (s !== 1 || !c || !c[0]) {\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n      } // Initial estimate.\n\n\n      s = Math.sqrt(+valueOf(x)); // Math.sqrt underflow/overflow?\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n\n      if (s == 0 || s == 1 / 0) {\n        n = coeffToString(c);\n        if ((n.length + e) % 2 == 0) n += '0';\n        s = Math.sqrt(+n);\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n        if (s == 1 / 0) {\n          n = '1e' + e;\n        } else {\n          n = s.toExponential();\n          n = n.slice(0, n.indexOf('e') + 1) + e;\n        }\n\n        r = new BigNumber(n);\n      } else {\n        r = new BigNumber(s + '');\n      } // Check for zero.\n      // r could be zero if MIN_EXP is changed after the this value was created.\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n      // coeffToString to throw.\n\n\n      if (r.c[0]) {\n        e = r.e;\n        s = e + dp;\n        if (s < 3) s = 0; // Newton-Raphson iteration.\n\n        for (;;) {\n          t = r;\n          r = half.times(t.plus(div(x, t, dp, 1)));\n\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n            // The exponent of r may here be one less than the final result exponent,\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n            // are indexed correctly.\n            if (r.e < e) --s;\n            n = n.slice(s - 3, s + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n            // iteration.\n\n            if (n == '9999' || !rep && n == '4999') {\n              // On the first iteration only, check to see if rounding up gives the\n              // exact result as the nines may infinitely repeat.\n              if (!rep) {\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                if (t.times(t).eq(x)) {\n                  r = t;\n                  break;\n                }\n              }\n\n              dp += 4;\n              s += 4;\n              rep = 1;\n            } else {\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n              // result. If not, then there are further digits and m will be truthy.\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n                // Truncate to the first rounding digit.\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                m = !r.times(r).eq(x);\n              }\n\n              break;\n            }\n          }\n        }\n      }\n\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n\n\n    P.toExponential = function (dp, rm) {\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        dp++;\n      }\n\n      return format(this, dp, rm, 1);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\n\n\n    P.toFixed = function (dp, rm) {\n      if (dp != null) {\n        intCheck(dp, 0, MAX);\n        dp = dp + this.e + 1;\n      }\n\n      return format(this, dp, rm);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\n\n\n    P.toFormat = function (dp, rm, format) {\n      var str,\n          x = this;\n\n      if (format == null) {\n        if (dp != null && rm && typeof rm == 'object') {\n          format = rm;\n          rm = null;\n        } else if (dp && typeof dp == 'object') {\n          format = dp;\n          dp = rm = null;\n        } else {\n          format = FORMAT;\n        }\n      } else if (typeof format != 'object') {\n        throw Error(bignumberError + 'Argument not an object: ' + format);\n      }\n\n      str = x.toFixed(dp, rm);\n\n      if (x.c) {\n        var i,\n            arr = str.split('.'),\n            g1 = +format.groupSize,\n            g2 = +format.secondaryGroupSize,\n            groupSeparator = format.groupSeparator || '',\n            intPart = arr[0],\n            fractionPart = arr[1],\n            isNeg = x.s < 0,\n            intDigits = isNeg ? intPart.slice(1) : intPart,\n            len = intDigits.length;\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n        if (g1 > 0 && len > 0) {\n          i = len % g1 || g1;\n          intPart = intDigits.substr(0, i);\n\n          for (; i < len; i += g1) {\n            intPart += groupSeparator + intDigits.substr(i, g1);\n          }\n\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n          if (isNeg) intPart = '-' + intPart;\n        }\n\n        str = fractionPart ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + (format.fractionGroupSeparator || '')) : fractionPart) : intPart;\n      }\n\n      return (format.prefix || '') + str + (format.suffix || '');\n    };\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\n\n\n    P.toFraction = function (md) {\n      var d,\n          d0,\n          d1,\n          d2,\n          e,\n          exp,\n          n,\n          n0,\n          n1,\n          q,\n          r,\n          s,\n          x = this,\n          xc = x.c;\n\n      if (md != null) {\n        n = new BigNumber(md); // Throw if md is less than one or is not an integer, unless it is Infinity.\n\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n          throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\n        }\n      }\n\n      if (!xc) return new BigNumber(x);\n      d = new BigNumber(ONE);\n      n1 = d0 = new BigNumber(ONE);\n      d1 = n0 = new BigNumber(ONE);\n      s = coeffToString(xc); // Determine initial denominator.\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n\n      e = d.e = s.length - x.e - 1;\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n      md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;\n      exp = MAX_EXP;\n      MAX_EXP = 1 / 0;\n      n = new BigNumber(s); // n0 = d1 = 0\n\n      n0.c[0] = 0;\n\n      for (;;) {\n        q = div(n, d, 0, 1);\n        d2 = d0.plus(q.times(d1));\n        if (d2.comparedTo(md) == 1) break;\n        d0 = d1;\n        d1 = d2;\n        n1 = n0.plus(q.times(d2 = n1));\n        n0 = d2;\n        d = n.minus(q.times(d2 = d));\n        n = d2;\n      }\n\n      d2 = div(md.minus(d0), d1, 0, 1);\n      n0 = n0.plus(d2.times(n1));\n      d0 = d0.plus(d2.times(d1));\n      n0.s = n1.s = x.s;\n      e = e * 2; // Determine which fraction is closer to x, n0/d0 or n1/d1\n\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n      MAX_EXP = exp;\n      return r;\n    };\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\n\n\n    P.toNumber = function () {\n      return +valueOf(this);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\n\n\n    P.toPrecision = function (sd, rm) {\n      if (sd != null) intCheck(sd, 1, MAX);\n      return format(this, sd, rm, 2);\n    };\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\n\n\n    P.toString = function (b) {\n      var str,\n          n = this,\n          s = n.s,\n          e = n.e; // Infinity or NaN?\n\n      if (e === null) {\n        if (s) {\n          str = 'Infinity';\n          if (s < 0) str = '-' + str;\n        } else {\n          str = 'NaN';\n        }\n      } else {\n        if (b == null) {\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, '0');\n        } else if (b === 10) {\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\n        } else {\n          intCheck(b, 2, ALPHABET.length, 'Base');\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\n        }\n\n        if (s < 0 && n.c[0]) str = '-' + str;\n      }\n\n      return str;\n    };\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\n\n\n    P.valueOf = P.toJSON = function () {\n      return valueOf(this);\n    };\n\n    P._isBigNumber = true;\n    if (configObject != null) BigNumber.set(configObject);\n    return BigNumber;\n  } // PRIVATE HELPER FUNCTIONS\n  // These functions don't need access to variables,\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\n\n\n  function bitFloor(n) {\n    var i = n | 0;\n    return n > 0 || n === i ? i : i - 1;\n  } // Return a coefficient array as a string of base 10 digits.\n\n\n  function coeffToString(a) {\n    var s,\n        z,\n        i = 1,\n        j = a.length,\n        r = a[0] + '';\n\n    for (; i < j;) {\n      s = a[i++] + '';\n      z = LOG_BASE - s.length;\n\n      for (; z--; s = '0' + s) {\n        ;\n      }\n\n      r += s;\n    } // Determine trailing zeros.\n\n\n    for (j = r.length; r.charCodeAt(--j) === 48;) {\n      ;\n    }\n\n    return r.slice(0, j + 1 || 1);\n  } // Compare the value of BigNumbers x and y.\n\n\n  function compare(x, y) {\n    var a,\n        b,\n        xc = x.c,\n        yc = y.c,\n        i = x.s,\n        j = y.s,\n        k = x.e,\n        l = y.e; // Either NaN?\n\n    if (!i || !j) return null;\n    a = xc && !xc[0];\n    b = yc && !yc[0]; // Either zero?\n\n    if (a || b) return a ? b ? 0 : -j : i; // Signs differ?\n\n    if (i != j) return i;\n    a = i < 0;\n    b = k == l; // Either Infinity?\n\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1; // Compare exponents.\n\n    if (!b) return k > l ^ a ? 1 : -1;\n    j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.\n\n    for (i = 0; i < j; i++) {\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n    } // Compare lengths.\n\n\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\n  }\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\n\n\n  function intCheck(n, min, max, name) {\n    if (n < min || n > max || n !== mathfloor(n)) {\n      throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));\n    }\n  } // Assumes finite n.\n\n\n  function isOdd(n) {\n    var k = n.c.length - 1;\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n  }\n\n  function toExponential(str, e) {\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n  }\n\n  function toFixedPoint(str, e, z) {\n    var len, zs; // Negative exponent?\n\n    if (e < 0) {\n      // Prepend zeros.\n      for (zs = z + '.'; ++e; zs += z) {\n        ;\n      }\n\n      str = zs + str; // Positive exponent\n    } else {\n      len = str.length; // Append zeros.\n\n      if (++e > len) {\n        for (zs = z, e -= len; --e; zs += z) {\n          ;\n        }\n\n        str += zs;\n      } else if (e < len) {\n        str = str.slice(0, e) + '.' + str.slice(e);\n      }\n    }\n\n    return str;\n  } // EXPORT\n\n\n  BigNumber = clone();\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber; // AMD.\n\n  if (typeof define == 'function' && define.amd) {\n    define(function () {\n      return BigNumber;\n    }); // Node.js and other environments that support module.exports.\n  } else if (typeof module != 'undefined' && module.exports) {\n    module.exports = BigNumber; // Browser.\n  } else {\n    if (!globalObject) {\n      globalObject = typeof self != 'undefined' && self ? self : window;\n    }\n\n    globalObject.BigNumber = BigNumber;\n  }\n})(this);"],"sourceRoot":""}